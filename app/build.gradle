plugins {
    alias libs.plugins.android.application
    alias libs.plugins.kotlin.gradle
    alias libs.plugins.kotlin.parcelize
    alias libs.plugins.app.distribution
    alias libs.plugins.playstore.publisher
    id "com.starter.easylauncher"
}

apply from: "../gradle/licensee.gradle"

def getVersionCode = { ->
    return Integer.valueOf(System.getenv().get("GITLAB_BUILD_NUMBER") ?: projectVersionCode)
}

android {
    namespace = "com.passbolt.mobile.android"
    defaultConfig {
        applicationId "com.passbolt.mobile.android"
        versionCode getVersionCode()
        versionName projectVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // connected android tests use qa config
    testBuildType "automatedTests"

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            minifyEnabled false
            firebaseAppDistribution {
                appId = "1:660923335137:android:08eec6c125f36ba9b092a0"
                serviceCredentialsFile = findProperty("serviceKey") ?: ""
                groups = "qa"
            }
            testCoverageEnabled = false
        }
        qa {
            initWith debug
            matchingFallbacks = ['release']

            applicationIdSuffix ".qa"
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            firebaseAppDistribution {
                appId = "1:660923335137:android:c7e452d7912a9e3ab092a0"
                serviceCredentialsFile = findProperty("serviceKey") ?: ""
                groups = "qa"
            }
        }
        automatedTests {
            initWith debug
            matchingFallbacks = ['debug']

            applicationIdSuffix ".qa.automated"
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            firebaseAppDistribution {
                appId = "1:660923335137:android:c7e452d7912a9e3ab092a0"
                serviceCredentialsFile = findProperty("serviceKey") ?: ""
                groups = "qa"
            }

            // automated tests fields
            buildConfigField("String", "PROPERTY_USER_ID", """\"${System.getenv("PASSBOLT_TEST_USER_ID")}\"""")
            buildConfigField("String", "PROPERTY_USERNAME", """\"${System.getenv("PASSBOLT_TEST_USERNAME")}\"""")
            buildConfigField("String", "PROPERTY_DOMAIN", """\"${System.getenv("PASSBOLT_TEST_DOMAIN")}\"""")
            buildConfigField("String", "PROPERTY_FIRST_NAME", """\"${System.getenv("PASSBOLT_TEST_FIRST_NAME")}\"""")
            buildConfigField("String", "PROPERTY_LAST_NAME", """\"${System.getenv("PASSBOLT_TEST_LAST_NAME")}\"""")
            buildConfigField("String", "PROPERTY_AVATAR_URL", """\"${System.getenv("PASSBOLT_TEST_AVATAR_URL") ?: ''}\"""")
            buildConfigField("String", "PROPERTY_KEY_FINGERPRINT", """\"${System.getenv("PASSBOLT_TEST_KEY_FINGERPRINT")}\"""")
            buildConfigField("String", "PROPERTY_LOCAL_USER_UUID", """\"${System.getenv("PASSBOLT_TEST_LOCAL_USER_UUID")}\"""")
            buildConfigField("String", "PROPERTY_ARMORED_KEY_BASE_64", """\"${System.getenv("PASSBOLT_TEST_ARMORED_KEY_BASE_64")}\"""")
            buildConfigField("String", "PROPERTY_PASSPHRASE", """\"${System.getenv("PASSBOLT_TEST_PASSPHRASE")}\"""")
        }

        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }
}

kotlin {
    jvmToolchain(17)
}

play {
    track = "production"
    userFraction = 1.0d
    releaseName = "$projectVersionName-$projectVersionCode"
    defaultToAppBundles = true
}

easylauncher {
    buildTypes {
        debug {
            enable true
            filters = customRibbon(
                label: "debug:${getVersionCode()}",
                labelColor: "#000000",
                ribbonColor: "#41C1FF"
            )
        }
        qa {
            enable true
            filters = customRibbon(
                label: "qa:${getVersionCode()}",
                labelColor: "#000000",
                ribbonColor: "#0C9115"
            )
        }
    }
}

dependencies {
    implementation project(':architecture')
    implementation project(':startup')
    implementation project(':setup')
    implementation project(':passboltapi')
    implementation project(':ui')
    implementation project(':common')
    implementation project(':navigation')
    implementation project(':mappers')
    implementation project(':qrscan')
    implementation project(':gopenpgp')
    implementation project(':autofillresources')
    implementation project(':authentication')
    implementation project(':main')
    implementation project(':home')
    implementation project(':settings')
    implementation project(':featureflags')
    implementation project(':database')
    implementation project(':secrets')
    implementation project(':security')
    implementation project(':linksapi')
    implementation project(':users')
    implementation project(':logger')
    implementation project(':accountdetails')
    implementation project(':localization')
    implementation project(':folderdetails')
    implementation project(':groupdetails')
    implementation project(':coreui')
    implementation project(':locationdetails')
    implementation project(':createfolder')
    implementation project(':folders')
    implementation project(':groups')
    implementation project(':tagsdetails')
    implementation project(':helpmenu')
    implementation project(':logs')
    implementation project(':resourcemoremenu')
    implementation project(':resources')
    implementation project(':resourcedetails')
    implementation project(':fulldatarefresh')
    implementation project(':resourcetypes')
    implementation project(':notifications')
    implementation project(':autofill')
    implementation project(':inappreview')
    implementation project(':envinfo')
    implementation project(':idlingresource')
    implementation project(':entity')
    implementation project(':transferaccounttoanotherdevice')
    implementation project(':otp')
    implementation project(':otpcore')
    implementation project(':serializers')
    implementation project(':resourcepicker')
    implementation project(':tags')
    implementation project(':scanotp')
    implementation project(':otpmoremenu')
    implementation project(':rbac')
    implementation project(':accounts')
    implementation project(':policies')
    implementation project(':pwnedpasswordsapi')
    implementation project(':passwordgenerator')
    implementation project(':metadata')
    implementation project(':encryptedstorage')
    implementation project(':authenticationcore')
    implementation project(':preferences')
    implementation project(':passphrasememorycache')
    implementation project(':jsonmodel')
    implementation project(':createresourcemenu')
    implementation project(':resourceform')
    implementation project(':permissions')

    debugImplementation libs.leakcanary

    implementation libs.lifecycle.process
    implementation libs.coil.core
    implementation libs.coil.base
    implementation libs.koin
    implementation libs.gson
    implementation libs.app.startup
    implementation libs.espresso.idling.resource
    implementation libs.json.path

    androidTestImplementation project(':commontest')
    androidTestImplementation libs.appcompat
    androidTestImplementation libs.material
    androidTestImplementation libs.android.tests.runner
    androidTestImplementation libs.android.test.rules
    androidTestImplementation libs.espresso.core
    androidTestImplementation libs.android.test.ktx
    androidTestImplementation libs.koin.test
    androidTestImplementation libs.koin.test.junit
    androidTestImplementation libs.android.test.intents
    androidTestImplementation libs.mockito.android
}
